name: Continuous Deployment

on:
  push:
    branches:
      - master

    paths-ignore:
      - .docker/**
      - .infrastructure/**
      - .prettier.config.js
      - .tool-versions
      - Brewfile
      - jest.config.js
      - Makefile
      - nightwatch.conf.js
      - README.md
      - svelte.config.js
      - tsconfig.json

jobs:
  unit-test:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/setup-go@master
        with:
          go-version: 1.13.x

      - uses: actions/checkout@master

      - name: Install PostgreSQL 12
        run: |
          sudo apt-get -y install bash-completion wget
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get -y install postgresql-client-12

      - name: Install Project Dependencies
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make install

      - name: Check Code Quality
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make codecheck

      - name: Setup Local Datastore
        run: go run . setup
      - name: Unit Test
        run: make test

      - name: Send Code Coverage To CodeCov
        run: bash <(curl -s https://codecov.io/bash)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-docker-image:
    needs: unit-test

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login To AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build/Tag/Push Image To AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: appist/appist
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f .docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
